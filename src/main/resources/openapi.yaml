openapi: 3.0.3
info:
  title: My Recommender API
  version: 1.0.0
servers:
  - url: /api

paths:
  /movies:
    get:
      summary: Get all movies
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
            description: Page number
          required: false
        - in: query
          name: size
          schema:
            type: integer
            default: 20
            description: Page size
          required: false
      responses:
        200:
          description: All movies
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MoviePage"
    post:
      summary: Create a new movie (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movie"
      responses:
        201:
          description: Created a new movie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"

  /movies/{id}:
    get:
      summary: Get a movie by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: A movie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
    put:
      summary: Update a movie by id (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Movie object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movie"
      responses:
        200:
          description: Updated a movie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
    delete:
      summary: Delete a movie by id (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Deleted a movie
          content: {}

  /ratings/{userId}/{movieId}:
    get:
      summary: Get a rating by user id and movie id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: movieId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A rating
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
    put:
      summary: Update a rating by user id and movie id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: movieId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Rating object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RatingPut"
      responses:
        200:
          description: Updated a rating
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"
    delete:
      summary: Delete a rating by user id and movie id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: movieId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Deleted a rating
          content: {}

  /ratings:
    post:
      summary: Create a rating by user id and movie id
      requestBody:
        description: Rating object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Rating"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rating"

  /users:
    get:
      summary: Get all users
      responses:
        200:
          description: All users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: Created a new user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /recommendations/{userId}:
    get:
      summary: Get movie recommendations for a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Movie recommendations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MoviePage"

  /upload-movies:
    post:
      description: Upload movies from a csv file (admin only)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                movieGenres:
                  type: string
                  format: binary
                movieImdbIds:
                  type: string
                  format: binary
      responses:
        201:
          description: Uploaded movies
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"

  /upload-users:
    post:
      description: Upload users from a csv file (admin only)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: Uploaded users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"

  /upload-ratings:
    post:
      description: Upload ratings from a csv file (admin only)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: Uploaded ratings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"

components:
  schemas:
    Rating:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        movieId:
          type: integer
          format: int64
        rating:
          type: number
          format: double
      required:
        - userId
        - movieId
        - rating
    RatingPut:
      type: object
      properties:
        rating:
          type: number
          format: double
      required:
        - rating

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
      required:
        - username
        - id

    UserList:
      type: array
      items:
        $ref: "#/components/schemas/User"

    Movie:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        imdbId:
          type: string
        genres:
          type: array
          items:
            type: string
      required:
        - title
        - genres
        - id
        - imdbId

    MoviePage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/Movie"
        totalPages:
          type: integer
        totalElements:
          type: integer
        size:
          type: integer
        number:
          type: integer
      required:
        - content
        - totalPages
        - totalElements
        - size
        - number

    Error:
      type: object
      properties:
        id:
          type: integer
        message:
          type: string

    UploadResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"
